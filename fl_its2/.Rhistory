#create function that averages only positive values in a vector
pos.mean <- function(vector){
pos.vals <- vector[which(vector > 0)]
p.mean <- mean(pos.vals)
if(length(pos.vals) == 0) p.mean <- 0
return(p.mean)
}
## Choose a persistence cutoff (min. fraction of taxon presence) for retaining taxa in the analysis
pers.cutoff <- 0.10
## Decide the number of iterations to run for each taxon. (>= 200 is recommended)
# Larger values of iter mean the script takes longer to run
iter <- 200
b <- seq.sid.lk1i.18
# Read in custom correlation matrix, if desired. Must set "use.custom.cors" to TRUE
if(use.custom.cors == T) {
custom.cor.mat <- read.csv("your_path_here.csv", header = T, row.names = 1)
custom.cor.mat <- as.matrix(custom.cor.mat)
#Check that correlation matrix and abundance matrix have the same dimension
print(dim(b)[2] == dim(custom.cor.mat)[2])
}
# Suggested steps to re-format data. At the end of these steps, the data should be in a matrix "c" where there are no empty samples or blank taxon columns.
c <- as.matrix(b)
c <- c[rowSums(c) > 0, colSums(c) > 0]
# Save total number of individuals in each sample in the original matrix. This will be 1 if data are in relative abundance, but not if matrix c is count data
rowsums.orig <- rowSums(c)
# Based on persistence cutoff, define a cutoff for the number of zeroes allowed in a taxon's distribution
zero.cutoff <- ceiling(pers.cutoff * dim(c)[1])
# Remove taxa that are below the persistence cutoff
d <- c[ , apply(c, 2, zero) < (dim(c)[1]-zero.cutoff) ]
# Remove any samples that no longer have any individuals, due to removing taxa
d <- d[rowSums(d) > 0, ]
#If using custom correlation matrix, need to remove rows/columns corresponding to the taxa below persistence cutoff
if(use.custom.cors == T){
custom.cor.mat.sub <- custom.cor.mat[apply(c, 2, zero) < (dim(c)[1]-zero.cutoff), apply(c, 2, zero) < (dim(c)[1]-zero.cutoff)]
}
# Create relative abundance matrix.
rel.d <- d / rowsums.orig
# Optionally, check to see what proportion of the community is retained after cutting out taxa
hist(rowSums(rel.d))
# Create observed correlation matrix
cor.mat.true <- cor(rel.d)
# Create vector to hold median otu-otu correlations for initial otu
med.tax.cors <- vector()
# Run this loop for the null model to get expected pairwise correlations
# Bypass null model if the option to input custom correlation matrix is TRUE
if(use.custom.cors == F) {
ifelse(tax.shuffle, {
for(which.taxon in 1:dim(rel.d)[2]){
#create vector to hold correlations from every permutation for each single otu
## perm.cor.vec.mat stands for permuted correlations vector matrix
perm.cor.vec.mat <- vector()
for(i in 1:iter){
#Create empty matrix of same dimension as rel.d
perm.rel.d <- matrix(numeric(0), dim(rel.d)[1], dim(rel.d)[2])
rownames(perm.rel.d) <- rownames(rel.d)
colnames(perm.rel.d) <- colnames(rel.d)
#For each otu
for(j in 1:dim(rel.d)[2]){
# Replace the original taxon vector with a permuted taxon vector
perm.rel.d[, j ] <- sample(rel.d[ ,j ])
}
# Do not randomize focal column
perm.rel.d[, which.taxon] <- rel.d[ , which.taxon]
# Calculate correlation matrix of permuted matrix
cor.mat.null <- cor(perm.rel.d)
# For each iteration, save the vector of null matrix correlations between focal taxon and other taxa
perm.cor.vec.mat <- cbind(perm.cor.vec.mat, cor.mat.null[, which.taxon])
}
# Save the median correlations between the focal taxon and all other taxa
med.tax.cors <- cbind(med.tax.cors, apply(perm.cor.vec.mat, 1, median))
# For large datasets, this can be helpful to know how long this loop will run
if(which.taxon %% 20 == 0){print(which.taxon)}
}
} , {
for(which.taxon in 1:dim(rel.d)[2]){
#create vector to hold correlations from every permutation for each single otu
## perm.cor.vec.mat stands for permuted correlations vector matrix
perm.cor.vec.mat <- vector()
for(i in 1:iter){
#Create duplicate matrix to shuffle abundances
perm.rel.d <- rel.d
#For each taxon
for(j in 1:dim(rel.d)[1]){
which.replace <- which(rel.d[j, ] > 0 )
# if the focal taxon is greater than zero, take it out of the replacement vector, so the focal abundance stays the same
which.replace.nonfocal <- which.replace[!(which.replace %in% which.taxon)]
#Replace the original taxon vector with a vector where the values greater than 0 have been randomly permuted
perm.rel.d[j, which.replace.nonfocal] <- sample(rel.d[ j, which.replace.nonfocal])
}
# Calculate correlation matrix of permuted matrix
cor.mat.null <- cor(perm.rel.d)
# For each iteration, save the vector of null matrix correlations between focal taxon and other taxa
perm.cor.vec.mat <- cbind(perm.cor.vec.mat, cor.mat.null[, which.taxon])
}
# Save the median correlations between the focal taxon and all other taxa
med.tax.cors <- cbind(med.tax.cors, apply(perm.cor.vec.mat, 1, median))
# For large datasets, this can be helpful to know how long this loop will run
if(which.taxon %% 20 == 0){print(which.taxon)}
}
}
)
}
# Save observed minus expected correlations. Use custom correlations if use.custom.cors = TRUE
ifelse(use.custom.cors == T, {
obs.exp.cors.mat <- custom.cor.mat.sub}, {
obs.exp.cors.mat <- cor.mat.true - med.tax.cors
}
)
diag(obs.exp.cors.mat) <- 0
# Calculate connectedness by averaging positive and negative observed - expected correlations
connectedness.pos <- apply(obs.exp.cors.mat, 2, pos.mean)
connectedness.neg <- apply(obs.exp.cors.mat, 2, neg.mean)
# Build network from adjacency
net_sid.lk1i.15 <- graph.adjacency(sparcc.adj_sid.lk1i.15, mode = "undirected", diag = FALSE)
net_sid.lk1o.15 <- graph.adjacency(sparcc.adj_sid.lk1o.15, mode = "undirected", diag = FALSE)
net_sid.lk1i.17 <- graph.adjacency(sparcc.adj_sid.lk1i.17, mode = "undirected", diag = FALSE)
net_sid.lk1o.17 <- graph.adjacency(sparcc.adj_sid.lk1o.17, mode = "undirected", diag = FALSE)
net_sid.lk1i.18 <- graph.adjacency(sparcc.adj_sid.lk1i.18, mode = "undirected", diag = FALSE)
net_sid.lk1o.18 <- graph.adjacency(sparcc.adj_sid.lk1o.18, mode = "undirected", diag = FALSE)
cen.sid.lk1i.15 <- eigen_centrality(net_sid.lk1i.15)$vector
cen.sid.lk1i.15
str(cen.sid.lk1i.15)
cen.sid.lk1i.15.df <- as.data.frame(cen.sid.lk1i.15)
View(cen.sid.lk1i.15.df)
# Degree distribution
deg.dist <- degree_distribution(net_sid.lk1i.15, mode = "all", cumulative = T) # Plot degree distribution
num <- (1:length(deg.dist))
treat <- rep("sid.lk1i.15",length(deg.dist))
deg.dist.sid.lk1i.15.df <- data.frame(deg.dist,num,treat)
deg.dist <- degree_distribution(net_sid.lk1o.15, mode = "all", cumulative = T) # Plot degree distribution
num <- (1:length(deg.dist))
treat <- rep("sid.lk1o.15",length(deg.dist))
deg.dist.sid.lk1o.15.df <- data.frame(deg.dist,num,treat)
deg.sid.lk1.15 <- rbind(deg.dist.sid.lk1i.15.df,deg.dist.sid.lk1o.15.df)
ggplot(deg.sid.lk1.15,aes(x=num,y=deg.dist,color=treat))+
geom_point()
ggplot(deg.sid.lk1.15,aes(x=num,y=deg.dist,color=treat))+
geom_boxplot()
ggplot(deg.sid.lk1.15,aes(x=treat,y=deg.dist,color=treat))+
geom_boxplot()
ggplot(deg.sid.lk1.15,aes(x=num,y=deg.dist,color=treat))+
geom_point()
deg.sid.lk1.15 <- rbind(deg.dist.sid.lk1i.15.df,deg.dist.sid.lk1o.15.df,deg.dist.sid.lk1i.17.df,deg.dist.sid.lk1o.17.df,deg.dist.sid.lk1i.18.df,deg.dist.sid.lk1o.18.df)
# Degree distribution
deg.dist <- degree_distribution(net_sid.lk1i.15, mode = "all", cumulative = T) # Plot degree distribution
num <- (1:length(deg.dist))
treat <- rep("sid.lk1i.15",length(deg.dist))
deg.dist.sid.lk1i.15.df <- data.frame(deg.dist,num,treat)
deg.dist <- degree_distribution(net_sid.lk1o.15, mode = "all", cumulative = T) # Plot degree distribution
num <- (1:length(deg.dist))
treat <- rep("sid.lk1o.15",length(deg.dist))
deg.dist.sid.lk1o.15.df <- data.frame(deg.dist,num,treat)
deg.dist <- degree_distribution(net_sid.lk1i.17, mode = "all", cumulative = T) # Plot degree distribution
num <- (1:length(deg.dist))
treat <- rep("sid.lk1i.17",length(deg.dist))
deg.dist.sid.lk1i.17.df <- data.frame(deg.dist,num,treat)
deg.dist <- degree_distribution(net_sid.lk1o.17, mode = "all", cumulative = T) # Plot degree distribution
num <- (1:length(deg.dist))
treat <- rep("sid.lk1o.17",length(deg.dist))
deg.dist.sid.lk1o.17.df <- data.frame(deg.dist,num,treat)
deg.dist <- degree_distribution(net_sid.lk1i.18, mode = "all", cumulative = T) # Plot degree distribution
num <- (1:length(deg.dist))
treat <- rep("sid.lk1i.18",length(deg.dist))
deg.dist.sid.lk1i.18.df <- data.frame(deg.dist,num,treat)
deg.dist <- degree_distribution(net_sid.lk1o.18, mode = "all", cumulative = T) # Plot degree distribution
num <- (1:length(deg.dist))
treat <- rep("sid.lk1o.18",length(deg.dist))
deg.dist.sid.lk1o.18.df <- data.frame(deg.dist,num,treat)
deg.sid.lk1.15 <- rbind(deg.dist.sid.lk1i.15.df,deg.dist.sid.lk1o.15.df,deg.dist.sid.lk1i.17.df,deg.dist.sid.lk1o.17.df,deg.dist.sid.lk1i.18.df,deg.dist.sid.lk1o.18.df)
deg.sid.lk1 <- rbind(deg.dist.sid.lk1i.15.df,deg.dist.sid.lk1o.15.df,deg.dist.sid.lk1i.17.df,deg.dist.sid.lk1o.17.df,deg.dist.sid.lk1i.18.df,deg.dist.sid.lk1o.18.df)
ggplot(deg.sid.lk1,aes(x=num,y=deg.dist,color=treat))+
geom_point()
# Degree distribution
deg.dist <- degree_distribution(net_sid.lk1i.15, mode = "all", cumulative = T) # Plot degree distribution
num <- (1:length(deg.dist))
treat <- rep("sid.lk1i.15",length(deg.dist))
time <- rep("Pre",length(deg.dist))
zone <- rep("Inshore",length(deg.dist))
deg.dist.sid.lk1i.15.df <- data.frame(deg.dist,num,treat,time,zone)
deg.dist <- degree_distribution(net_sid.lk1o.15, mode = "all", cumulative = T) # Plot degree distribution
num <- (1:length(deg.dist))
treat <- rep("sid.lk1o.15",length(deg.dist))
time <- rep("Pre",length(deg.dist))
zone <- rep("Offshore",length(deg.dist))
deg.dist.sid.lk1o.15.df <- data.frame(deg.dist,num,treat,time,zone)
deg.dist <- degree_distribution(net_sid.lk1i.17, mode = "all", cumulative = T) # Plot degree distribution
num <- (1:length(deg.dist))
treat <- rep("sid.lk1i.17",length(deg.dist))
time <- rep("Irma",length(deg.dist))
zone <- rep("Inshore",length(deg.dist))
deg.dist.sid.lk1i.17.df <- data.frame(deg.dist,num,treat,time,zone)
deg.dist <- degree_distribution(net_sid.lk1o.17, mode = "all", cumulative = T) # Plot degree distribution
num <- (1:length(deg.dist))
treat <- rep("sid.lk1o.17",length(deg.dist))
time <- rep("Irma",length(deg.dist))
zone <- rep("Offshore",length(deg.dist))
deg.dist.sid.lk1o.17.df <- data.frame(deg.dist,num,treat,time,zone)
deg.dist <- degree_distribution(net_sid.lk1i.18, mode = "all", cumulative = T) # Plot degree distribution
num <- (1:length(deg.dist))
treat <- rep("sid.lk1i.18",length(deg.dist))
time <- rep("Post",length(deg.dist))
zone <- rep("Inshore",length(deg.dist))
deg.dist.sid.lk1i.18.df <- data.frame(deg.dist,num,treat,time,zone)
deg.dist <- degree_distribution(net_sid.lk1o.18, mode = "all", cumulative = T) # Plot degree distribution
num <- (1:length(deg.dist))
treat <- rep("sid.lk1o.18",length(deg.dist))
time <- rep("Post",length(deg.dist))
zone <- rep("Offshore",length(deg.dist))
deg.dist.sid.lk1o.18.df <- data.frame(deg.dist,num,treat,time,zone)
deg.sid.lk1 <- rbind(deg.dist.sid.lk1i.15.df,deg.dist.sid.lk1o.15.df,deg.dist.sid.lk1i.17.df,deg.dist.sid.lk1o.17.df,deg.dist.sid.lk1i.18.df,deg.dist.sid.lk1o.18.df)
ggplot(deg.sid.lk1,aes(x=num,y=deg.dist,color=treat))+
geom_point()
ggplot(deg.sid.lk1,aes(x=num,y=deg.dist,color=treat))+
geom_point()+
facet_wrap(~time)
ggplot(deg.sid.lk1,aes(x=num,y=deg.dist,color=zone))+
geom_point()+
facet_wrap(~time)
ggplot(deg.sid.lk1,aes(x=num,y=deg.dist,color=zone))+
geom_point()+
geom_line()+
facet_wrap(~time)
ggplot(deg.sid.lk1,aes(x=num,y=deg.dist,color=time))+
geom_point()+
geom_line()+
facet_wrap(~zone)
ggplot(deg.sid.lk1,aes(x=num,y=deg.dist,color=time))+
geom_point()+
geom_line()+
facet_wrap(zone~)
ggplot(deg.sid.lk1,aes(x=num,y=deg.dist,color=time))+
geom_point()+
geom_line()+
scale_color_manual(values=c("#3B0F70","#FA7F53","#A8327D"))+
facet_wrap(~zone)
ggplot(deg.sid.lk1,aes(x=num,y=deg.dist,color=time))+
geom_point()+
geom_line()+
scale_color_manual(values=c("#3B0F70","#FA7F53","#A8327D"))+
facet_grid(time~zone)
ggplot(deg.sid.lk1,aes(x=num,y=deg.dist,color=time))+
geom_point()+
geom_line()+
scale_color_manual(values=c("#3B0F70","#FA7F53","#A8327D"))+
facet_grid(zone~time)
ggplot(deg.sid.lk1,aes(x=num,y=deg.dist,color=time))+
geom_point()+
geom_line()+
scale_color_manual(values=c("#3B0F70","#FA7F53","#A8327D"))+
facet_wrap(~zone)
ggplot(deg.sid.lk1,aes(x=num,y=deg.dist,color=time))+
geom_point()+
geom_line()+
scale_color_manual(values=c("#3B0F70","#FA7F53","#A8327D"))+
facet_grid(.~zone)
ggplot(deg.sid.lk1,aes(x=num,y=deg.dist,color=time))+
geom_point()+
geom_line()+
scale_color_manual(values=c("#3B0F70","#FA7F53","#A8327D"))+
facet_grid(zone~.)
ggplot(deg.sid.lk1,aes(x=num,y=deg.dist,color=time))+
geom_point()+
geom_line()+
scale_color_manual(values=c("#3B0F70","#FA7F53","#A8327D"))+
facet_grid(zone~.)+
theme_cowplot()+
ylab("Degree distribution")+
xlab("Number of connections")
ggplot(deg.sid.lk1,aes(x=num,y=deg.dist,color=time))+
geom_point()+
geom_line()+
scale_color_manual(values=c("#3B0F70","#FA7F53","#A8327D"))+
facet_grid(zone~.)+
theme_bw()+
ylab("Degree distribution")+
xlab("Number of connections")
deg.sid.lk1$time <- as.factor(deg.sid.lk1$time,levels=c("Pre","Irma","Post"))
deg.sid.lk1$time <- factor(deg.sid.lk1$time,levels=c("Pre","Irma","Post"))
ggplot(deg.sid.lk1,aes(x=num,y=deg.dist,color=time))+
geom_point()+
geom_line()+
scale_color_manual(values=c("#3B0F70","#FA7F53","#A8327D"))+
facet_grid(zone~.)+
theme_bw()+
ylab("Degree distribution")+
xlab("Number of connections")
# Degree distribution
deg.dist <- degree_distribution(net_sid.lk1i.15, mode = "all", cumulative = T) # Plot degree distribution
num <- (1:length(deg.dist))
treat <- rep("sid.lk1i.15",length(deg.dist))
Timepoint <- rep("Pre",length(deg.dist))
zone <- rep("Inshore",length(deg.dist))
deg.dist.sid.lk1i.15.df <- data.frame(deg.dist,num,treat,Timepoint,zone)
deg.dist <- degree_distribution(net_sid.lk1o.15, mode = "all", cumulative = T) # Plot degree distribution
num <- (1:length(deg.dist))
treat <- rep("sid.lk1o.15",length(deg.dist))
Timepoint <- rep("Pre",length(deg.dist))
zone <- rep("Offshore",length(deg.dist))
deg.dist.sid.lk1o.15.df <- data.frame(deg.dist,num,treat,Timepoint,zone)
deg.dist <- degree_distribution(net_sid.lk1i.17, mode = "all", cumulative = T) # Plot degree distribution
num <- (1:length(deg.dist))
treat <- rep("sid.lk1i.17",length(deg.dist))
Timepoint <- rep("Irma",length(deg.dist))
zone <- rep("Inshore",length(deg.dist))
deg.dist.sid.lk1i.17.df <- data.frame(deg.dist,num,treat,Timepoint,zone)
deg.dist <- degree_distribution(net_sid.lk1o.17, mode = "all", cumulative = T) # Plot degree distribution
num <- (1:length(deg.dist))
treat <- rep("sid.lk1o.17",length(deg.dist))
Timepoint <- rep("Irma",length(deg.dist))
zone <- rep("Offshore",length(deg.dist))
deg.dist.sid.lk1o.17.df <- data.frame(deg.dist,num,treat,Timepoint,zone)
deg.dist <- degree_distribution(net_sid.lk1i.18, mode = "all", cumulative = T) # Plot degree distribution
num <- (1:length(deg.dist))
treat <- rep("sid.lk1i.18",length(deg.dist))
Timepoint <- rep("Post",length(deg.dist))
zone <- rep("Inshore",length(deg.dist))
deg.dist.sid.lk1i.18.df <- data.frame(deg.dist,num,treat,Timepoint,zone)
deg.dist <- degree_distribution(net_sid.lk1o.18, mode = "all", cumulative = T) # Plot degree distribution
num <- (1:length(deg.dist))
treat <- rep("sid.lk1o.18",length(deg.dist))
Timepoint <- rep("Post",length(deg.dist))
zone <- rep("Offshore",length(deg.dist))
deg.dist.sid.lk1o.18.df <- data.frame(deg.dist,num,treat,Timepoint,zone)
deg.sid.lk1 <- rbind(deg.dist.sid.lk1i.15.df,deg.dist.sid.lk1o.15.df,deg.dist.sid.lk1i.17.df,deg.dist.sid.lk1o.17.df,deg.dist.sid.lk1i.18.df,deg.dist.sid.lk1o.18.df)
ggplot(deg.sid.lk1,aes(x=num,y=deg.dist,color=zone))+
geom_point()+
geom_line()+
facet_wrap(~Timepoint)
deg.sid.lk1$Timepoint <- factor(deg.sid.lk1$Timepoint,levels=c("Pre","Irma","Post"))
ggplot(deg.sid.lk1,aes(x=num,y=deg.dist,color=Timepoint))+
geom_point()+
geom_line()+
scale_color_manual(values=c("#3B0F70","#FA7F53","#A8327D"))+
facet_grid(zone~.)+
theme_bw()+
ylab("Degree distribution")+
xlab("Number of connections")+
#ggplot(deg.sid.lk1.15,aes(x=deg.dist,y=,color=treat))+
#  geom_boxplot()
```
ggplot(deg.sid.lk1,aes(x=num,y=deg.dist,color=Timepoint))+
geom_point()+
geom_line()+
scale_color_manual(values=c("#3B0F70","#FA7F53","#A8327D"))+
facet_grid(zone~.)+
theme_bw()+
ylab("Degree distribution")+
xlab("Number of connections")
ggplot(deg.sid.lk1,aes(x=num,y=deg.dist,color=Timepoint))+
geom_point()+
geom_line()+
scale_color_manual(values=c("#3B0F70","#FA7F53","#A8327D"))+
facet_grid(zone~.)+
theme_bw()+
ylab("Probability distribution")+
xlab("Number of connections")
ggsave("sid.lk1.degree.pdf")
ggplot(deg.sid.lk1,aes(x=num,y=deg.dist,color=Timepoint))+
geom_point()+
geom_line()+
scale_color_manual(values=c("#3B0F70","#FA7F53","#A8327D"))+
facet_grid(zone~.)+
theme_cowplot()+
ylab("Probability distribution")+
xlab("Number of connections")
ggsave("sid.lk1.degree.pdf")
library(phyloseq)
library('ggplot2')
library('Rmisc')
library(cowplot)
library("ggpubr")
library("vegan")
setwd("~/Google Drive (nicfall@bu.edu)/Flirma/flirma_networks_master/fl_its2")
plot(sort(rowSums(counts)))
counts <- read.csv('flits_symportal_profile_counts.csv',header=TRUE,row.names=1,check.names=FALSE)
#325 samples, 75 type profiles
plot(sort(rowSums(counts)))
counts.no0 <- counts[rowSums(counts)>0,]
#2 that are 0, removing them now: LK1-I_1199_srad_2018, UK2-O_1105_srad_2018
ps <- readRDS("ps.its2.RDS")
ps.gen <- tax_glom(ps,"Clade")
ntaxa(ps); ntaxa(ps.gen)
# import dataframe holding sample information
samdf <- read.csv("fl_sample_info - ITS2_all.csv")
head(samdf)
samdf$full_sample <- paste0(samdf$sample,"_",samdf$spp,"_",samdf$year)
rownames(samdf) <- samdf$full_sample
# import taxa info
taxa <- read.csv("flits_symportal_taxa.csv",header=TRUE,row.names=1)
#rownames(taxa) <- as.factor(taxa$ITS2_type_profile)
mtaxa <- as.matrix(taxa)
# import counts (absolute abundance from its2 type profiles)
mcounts <- as.matrix(counts.no0)
# Construct phyloseq object
ps <- phyloseq(otu_table(mcounts, taxa_are_rows=FALSE),
sample_data(samdf),
tax_table(mtaxa))
ps
# phyloseq-class experiment-level object
# otu_table()   OTU Table:         [ 75 taxa and 323 samples ]
# sample_data() Sample Data:       [ 323 samples by 12 sample variables ]
# tax_table()   Taxonomy Table:    [ 75 taxa by 7 taxonomic ranks ]
#saveRDS(ps,file="ps.its2.rds")
# ps.sid <- subset_samples(ps,spp=="ssid")
#
# ps.sid.pre <- subset_samples(ps.sid,time=="Pre")
# ps.sid.irm <- subset_samples(ps.sid,time=="Irma")
# ps.sid.pos <- subset_samples(ps.sid,time=="Post")
#
# ps.sid.pre.lk1 <- subset_samples(ps.sid.pre,site=="LK1")
# ps.sid.pre.uk1 <- subset_samples(ps.sid.pre,site=="UK1")
# ps.sid.pre.uk2 <- subset_samples(ps.sid.pre,site=="UK2")
#
# ps.sid.irm.lk1 <- subset_samples(ps.sid.irm,site=="LK1")
# ps.sid.irm.uk1 <- subset_samples(ps.sid.irm,site=="UK1")
# ps.sid.irm.uk2 <- subset_samples(ps.sid.irm,site=="UK2")
#
# ps.sid.pos.lk1 <- subset_samples(ps.sid.pos,site=="LK1")
# ps.sid.pos.uk1 <- subset_samples(ps.sid.pos,site=="UK1")
# ps.sid.pos.uk2 <- subset_samples(ps.sid.pos,site=="UK2")
ps.gen <- tax_glom(ps,"Clade")
ntaxa(ps); ntaxa(ps.gen)
ps.sid.gen <- subset_samples(ps.gen,spp=="ssid")
ps.sid.gen.pre <- subset_samples(ps.sid.gen,time=="Pre")
ps.sid.gen.irm <- subset_samples(ps.sid.gen,time=="Irma")
ps.sid.gen.pos <- subset_samples(ps.sid.gen,time=="Post")
# ps.sid.pre.lk1.rel <- transform_sample_counts(ps.sid.pre.lk1, function(x) x / sum(x))
# ps.sid.pre.lk1.rel.zone <- merge_samples(ps.sid.pre.lk1.rel, "zone")
# ps.sid.pre.lk1.rel.zone <- transform_sample_counts(ps.sid.pre.lk1.rel.zone, function(x) x / sum(x))
#
# plot_bar(ps.sid.pre.lk1.rel.zone, fill="Clade")
#remove uk3
ps.sid.gen.pre <- subset_samples(ps.sid.gen.pre,site!="UK3")
ps.sid.gen.pre.rel <- transform_sample_counts(ps.sid.gen.pre, function(x) x / sum(x))
ps.sid.gen.pre.rel.sz <- merge_samples(ps.sid.gen.pre.rel, "site_zone")
ps.sid.gen.pre.rel.sz <- transform_sample_counts(ps.sid.gen.pre.rel.sz, function(x) x / sum(x))
gg.bar.pre <- plot_bar(ps.sid.gen.pre.rel.sz, fill="Clade")+
ggtitle("Pre")+
theme_cowplot()
gg.bar.pre
ps.sid.gen.irm.rel <- transform_sample_counts(ps.sid.gen.irm, function(x) x / sum(x))
ps.sid.gen.irm.rel.sz <- merge_samples(ps.sid.gen.irm.rel, "site_zone")
ps.sid.gen.irm.rel.sz <- transform_sample_counts(ps.sid.gen.irm.rel.sz, function(x) x / sum(x))
gg.bar.irm <- plot_bar(ps.sid.gen.irm.rel.sz, fill="Clade")+
ggtitle("Irma")+
theme_cowplot()
ps.sid.gen.pos.rel <- transform_sample_counts(ps.sid.gen.pos, function(x) x / sum(x))
ps.sid.gen.pos.rel.sz <- merge_samples(ps.sid.gen.pos.rel, "site_zone")
ps.sid.gen.pos.rel.sz <- transform_sample_counts(ps.sid.gen.pos.rel.sz, function(x) x / sum(x))
gg.bar.pos <- plot_bar(ps.sid.gen.pos.rel.sz, fill="Clade")+
ggtitle("Post")+
theme_cowplot()
gg.bar.clade <- ggarrange(gg.bar.pre,gg.bar.irm,gg.bar.pos,ncol=3)
gg.bar.clade
ggsave("bar.clade_horizontal.pdf",width=9)
gg.bar.pos <- plot_bar(ps.sid.gen.pos.rel.sz, fill="Clade")+
ggtitle("Post")+
theme_cowplot()+
facet_wrap(~site)
gg.bar.pos
ggsave("bar.clade_horizontal.pdf",width=9,height=4)
gg.bar.clade <- ggarrange(gg.bar.pre,gg.bar.irm,gg.bar.pos,ncol=3)
gg.bar.pos <- plot_bar(ps.sid.gen.pos.rel.sz, fill="Clade")+
ggtitle("Post")+
theme_cowplot()
gg.bar.clade <- ggarrange(gg.bar.pre,gg.bar.irm,gg.bar.pos,ncol=3)
gg.bar.clade
ggsave("bar.clade_horizontal.pdf",width=9,height=4)
gg.bar.clade <- ggarrange(gg.bar.pre,gg.bar.irm,gg.bar.pos,ncol=3,common.legend=T)
gg.bar.clade
gg.bar.clade <- ggarrange(gg.bar.pre,gg.bar.irm,gg.bar.pos,ncol=3,common.legend=T,legend.position="right")
gg.bar.clade
gg.bar.clade <- ggarrange(gg.bar.pre,gg.bar.irm,gg.bar.pos,ncol=3,common.legend=T,legend="right")
gg.bar.clade
ggsave("bar.clade_horizontal.pdf",width=9,height=4)
gg.bar.pos <- plot_bar(ps.sid.gen.pos.rel.sz, fill="Clade")+
ggtitle("Post")+
theme(axis.text.x=element_text(angle=90,hjust=1))+
theme_cowplot()
gg.bar.clade <- ggarrange(gg.bar.pre,gg.bar.irm,gg.bar.pos,ncol=3,common.legend=T,legend="right")
gg.bar.clade
gg.bar.pos <- plot_bar(ps.sid.gen.pos.rel.sz, fill="Clade")+
ggtitle("Post")+
theme_cowplot()+
theme(axis.text.x=element_text(angle=90,hjust=1))+
xlab()
gg.bar.pos <- plot_bar(ps.sid.gen.pos.rel.sz, fill="Clade")+
ggtitle("Post")+
theme_cowplot()+
theme(axis.text.x=element_text(angle=90,hjust=1))+
xlab("")
gg.bar.clade <- ggarrange(gg.bar.pre,gg.bar.irm,gg.bar.pos,ncol=3,common.legend=T,legend="right")
gg.bar.clade
gg.bar.pre <- plot_bar(ps.sid.gen.pre.rel.sz, fill="Clade")+
ggtitle("Pre")+
theme_cowplot()+
theme(axis.text.x=element_text(angle=90,hjust=1))+
xlab("")
gg.bar.pre
gg.bar.irm <- plot_bar(ps.sid.gen.irm.rel.sz, fill="Clade")+
ggtitle("Irma")+
theme_cowplot()+
theme(axis.text.x=element_text(angle=90,hjust=1))+
xlab("")
gg.bar.pos <- plot_bar(ps.sid.gen.pos.rel.sz, fill="Clade")+
ggtitle("Post")+
theme_cowplot()+
theme(axis.text.x=element_text(angle=90,hjust=1))+
xlab("")
gg.bar.clade <- ggarrange(gg.bar.pre,gg.bar.irm,gg.bar.pos,ncol=3,common.legend=T,legend="right")
gg.bar.clade
ggsave("bar.clade_horizontal.pdf",width=9,height=4)
