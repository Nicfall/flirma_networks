#installing/loading packages:
#if (!requireNamespace("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")
#BiocManager::install("dada2")
library(dada2); packageVersion("dada2")
#Version 1.16.0
library(ShortRead)
#packageVersion("ShortRead")
#1.46.0
library(Biostrings)
#packageVersion("Biostrings")
#2.56.0
path <- "~/mr16s_revised_temp" # CHANGE ME to the directory containing the fastq files after unzipping.
setwd("/Volumes/Macintosh HD/Users/nicolakriefall/nicfall@bu.edu - Google Drive/My Drive/Flirma/fl_16s")
#packageVersion("Biostrings")
#2.56.0
path <- "~/nicfall@bu.edu - Google Drive/My Drive/Flirma/fl_16s/raw_temp" # CHANGE ME to the directory containing the fastq files after unzipping.
sessionInfo()
fnFs <- sort(list.files(path, pattern = "_R1.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2.fastq.gz", full.names = TRUE))
get.sample.name <- function(fname) strsplit(basename(fname), "_")[[1]][1]
sample.names <- unname(sapply(fnFs, get.sample.name))
head(sample.names)
sample.names
get.sample.name <- function(fname) strsplit(basename(fname), "_")[[2]][1]
sample.names <- unname(sapply(fnFs, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "_")[[1]][2]
sample.names <- unname(sapply(fnFs, get.sample.name))
head(sample.names)
sample.names
fnFs
#### check for primers ####
FWD <- "GTGYCAGCMGCCGCGGTA"  ## CHANGE ME to your forward primer sequence
REV <- "GGACTACHVGGGTWTCTAAT"  ## CHANGE ME...
allOrients <- function(primer) {
# Create all orientations of the input sequence
require(Biostrings)
dna <- DNAString(primer)  # The Biostrings works w/ DNAString objects rather than character vectors
orients <- c(Forward = dna, Complement = complement(dna), Reverse = reverse(dna),
RevComp = reverseComplement(dna))
return(sapply(orients, toString))  # Convert back to character vector
}
FWD.orients <- allOrients(FWD)
REV.orients <- allOrients(REV)
FWD.orients
REV.orients
fnFs.filtN <- file.path(path, "filtN", basename(fnFs)) # Put N-filterd files in filtN/ subdirectory
fnRs.filtN <- file.path(path, "filtN", basename(fnRs))
filterAndTrim(fnFs, fnFs.filtN, fnRs, fnRs.filtN, maxN = 0, multithread = TRUE)
primerHits <- function(primer, fn) {
# Counts number of reads in which the primer is found
nhits <- vcountPattern(primer, sread(readFastq(fn)), fixed = FALSE)
return(sum(nhits > 0))
}
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[93]]),
FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[93]]),
REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[93]]),
REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[93]]))
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[91]]),
FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[91]]),
REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[91]]),
REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[91]]))
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[91]]),
FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[91]]),
REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[91]]),
REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[91]]))
#towards the beginning
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[4]]),
FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[4]]),
REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[4]]),
REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[4]]))
#at the end
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[91]]),
FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[91]]),
REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[91]]),
REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[91]]))
#First, lets look at quality profile of R1 reads
plotQualityProfile(fnFs.filtN[c(1,2,3,4)])
plotQualityProfile(fnFs.filtN[c(88,89,90,91)])
#Then look at quality profile of R2 reads
plotQualityProfile(fnRs.filtN[c(1,2,3,4)])
plotQualityProfile(fnRs.filtN[c(88,89,90,91)])
#installing/loading packages:
#if (!requireNamespace("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")
#BiocManager::install("dada2")
library(dada2); packageVersion("dada2")
#Version 1.16.0
library(ShortRead)
#packageVersion("ShortRead")
#1.46.0
library(Biostrings)
#packageVersion("Biostrings")
#2.56.0
path <- "~/nicfall@bu.edu - Google Drive/My Drive/Flirma/fl_16s/raw_temp" # CHANGE ME to the directory containing the fastq files after unzipping.
#installing/loading packages:
#if (!requireNamespace("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")
#BiocManager::install("dada2")
library(dada2); packageVersion("dada2")
#Version 1.16.0
library(ShortRead)
#packageVersion("ShortRead")
#1.46.0
library(Biostrings)
#packageVersion("Biostrings")
#2.56.0
path <- "~/nicfall@bu.edu - Google Drive/My Drive/Flirma/fl_16s/raw_temp2" # CHANGE ME to the directory containing the fastq files after unzipping.
fnFs <- sort(list.files(path, pattern = "_R1.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2.fastq.gz", full.names = TRUE))
get.sample.name <- function(fname) strsplit(basename(fname), "_")[[1]][2]
sample.names <- unname(sapply(fnFs, get.sample.name))
head(sample.names)
sample.names
#### check for primers ####
FWD <- "GTGYCAGCMGCCGCGGTA"  ## CHANGE ME to your forward primer sequence
REV <- "GGACTACHVGGGTWTCTAAT"  ## CHANGE ME...
allOrients <- function(primer) {
# Create all orientations of the input sequence
require(Biostrings)
dna <- DNAString(primer)  # The Biostrings works w/ DNAString objects rather than character vectors
orients <- c(Forward = dna, Complement = complement(dna), Reverse = reverse(dna),
RevComp = reverseComplement(dna))
return(sapply(orients, toString))  # Convert back to character vector
}
FWD.orients <- allOrients(FWD)
REV.orients <- allOrients(REV)
FWD.orients
REV.orients
fnFs.filtN <- file.path(path, "filtN", basename(fnFs)) # Put N-filterd files in filtN/ subdirectory
fnRs.filtN <- file.path(path, "filtN", basename(fnRs))
filterAndTrim(fnFs, fnFs.filtN, fnRs, fnRs.filtN, maxN = 0, multithread = TRUE)
primerHits <- function(primer, fn) {
# Counts number of reads in which the primer is found
nhits <- vcountPattern(primer, sread(readFastq(fn)), fixed = FALSE)
return(sum(nhits > 0))
}
#towards the beginning
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[4]]),
FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[4]]),
REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[4]]),
REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[4]]))
#at the end
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[91]]),
FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[91]]),
REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[91]]),
REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[91]]))
#towards the beginning
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[1]]),
FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[1]]),
REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[1]]),
REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[1]]))
#at the end
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[4]]),
FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[4]]),
REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[4]]),
REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[4]]))
#First, lets look at quality profile of R1 reads
plotQualityProfile(fnFs.filtN[c(1,2,3,4)])
#Then look at quality profile of R2 reads
plotQualityProfile(fnRs.filtN[c(1,2,3,4)])
# Make directory and filenames for the filtered fastqs
filt_path <- file.path(path, "trimmed")
if(!file_test("-d", filt_path)) dir.create(filt_path)
filtFs <- file.path(filt_path, paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(filt_path, paste0(sample.names, "_R_filt.fastq.gz"))
filtFs <- file.path(filt_path, paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(filt_path, paste0(sample.names, "_R_filt.fastq.gz"))
filt_path
# Make directory and filenames for the filtered fastqs
filt_path <- file.path(path, "trimmed")
if(!file_test("-d", filt_path)) dir.create(filt_path)
filtFs <- file.path(filt_path, paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(filt_path, paste0(sample.names, "_R_filt.fastq.gz"))
#changing a bit from default settings - maxEE=1 (1 max expected error, more conservative), truncating length at 175 bp for both forward & reverse [leaves ~50bp overlap], added "trimleft" to cut off primers [18 for forward, 20 for reverse]
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs,
truncLen=c(175,175), #leaves ~50bp overlap
maxN=0, #DADA does not allow Ns
maxEE=c(1,1), #allow 1 expected errors, where EE = sum(10^(-Q/10)); more conservative, model converges
truncQ=2,
#trimLeft=c(18,20), #N nucleotides to remove from the start of each read
rm.phix=TRUE, #remove reads matching phiX genome
matchIDs=TRUE, #enforce matching between id-line sequence identifiers of F and R reads
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
tail(out)
#setDadaOpt(MAX_CONSIST=30) #increase number of cycles to allow convergence
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
#sanity check: visualize estimated error rates
#error rates should decline with increasing qual score
#red line is based on definition of quality score alone
#black line is estimated error rate after convergence
#dots are observed error rate for each quality score
plotErrors(errF, nominalQ=TRUE)
plotErrors(errR, nominalQ=TRUE)
save("test.Rdata")
save(file="test.Rdata")
save(file="test.RData")
save.image(file="test.Rdata")
save.image(file="test.RData")
load("test.RData")
