ps.exp.wtr.trim ##67 taxa
tail(sort(sample_sums(ps.exp.wtr.trim),decreasing=T))
##larvae
ps.exp.lar.trim <- filter_taxa(ps.exp.lar, function(x) sum(x > 1) > (0.12*length(x)), TRUE)
ps.exp.lar.trim #54 taxa
tail(sort(sample_sums(ps.exp.lar.trim),decreasing=T))
##proportion of zeroes
##water
otu.exp.wtr <- data.frame(ps.exp.wtr@otu_table)
sum(otu.exp.wtr == 0) / (ncol(otu.exp.wtr) * nrow(otu.exp.wtr)) * 100
otu.exp.wtr.trim <- data.frame(ps.exp.wtr.trim@otu_table)
sum(otu.exp.wtr.trim == 0) / (ncol(otu.exp.wtr.trim) * nrow(otu.exp.wtr.trim)) * 100
##larv
otu.exp.lar <- data.frame(ps.exp.lar@otu_table)
sum(otu.exp.lar == 0) / (ncol(otu.exp.lar) * nrow(otu.exp.lar)) * 100
otu.exp.lar.trim <- data.frame(ps.exp.lar.trim@otu_table)
sum(otu.exp.lar.trim == 0) / (ncol(otu.exp.lar.trim) * nrow(otu.exp.lar.trim)) * 100
##save if ready
#saveRDS(ps.exp.lar.trim,file="ps.exp.lar.trim.rds")
```
otu.wtr <- data.frame(ps.exp.wtr.trim@otu_table)
otu.lar <- data.frame(ps.exp.lar.trim@otu_table)
#total read count colums
otu.wtr$sum <- rowSums(otu.wtr)
otu.lar$sum <- rowSums(otu.lar)
otu.wtr$Short_label <- row.names(otu.wtr)
otu.lar$Short_label <- row.names(otu.lar)
#bring in the metadata again
samdf.wtr <- data.frame(ps.exp.wtr.trim@sam_data)
samdf.lar <- data.frame(ps.exp.lar.trim@sam_data)
##add extra metadata
meso.data <- read.csv("../raw_data/reusum23_mesocosmdata.csv")
samdf.wtr.more <- merge(samdf.wtr,meso.data)
samdf.lar.more <- merge(samdf.lar,meso.data)
samdf.wtr.more$food.microbes <- paste0(samdf.wtr.more$Food_type,"_",samdf.wtr.more$Microbe_treatment)
samdf.lar.more$food.microbes <- paste0(samdf.lar.more$Food_type,"_",samdf.lar.more$Microbe_treatment)
#join the data sets by sample name
df.water <- plyr::join(otu.wtr, samdf.wtr.more, by="Short_label", type="left")
df.larv <- plyr::join(otu.lar, samdf.lar.more, by="Short_label", type="left")
colnames(df.water)
##getting rid of some irrelevant metadat
df.water1 <- df.water %>%
dplyr::select(-Longer_name,-Short_label,-Exp_day,-Microbe_treatment,-Food_type,-Mesocosm_type,-Longer_name,-Sample_type,-Num_larvae,-Date_collected,-Mesocosm_treatment,-Treatment_notes,-Notes,-lib_size_clean,-is.neg,-Num_larvae_d00,-Num_larvae_d08,-Num_larvae_d34,-Num_larvae_d40,-Total_pupae,-Proportion_pupated,-Biomass_day30)
colnames(df.water1)
df.water.long <- melt(df.water1, id.vars=c("sum", "Mesocosm_id", "food.microbes", "Biomass_day40"))
df.water.long$rowid <- 1:nrow(df.water.long)
df.larv1 <- df.larv %>%
dplyr::select(-Longer_name,-Short_label,-Exp_day,-Microbe_treatment,-Food_type,-Mesocosm_type,-Longer_name,-Sample_type,-Num_larvae,-Date_collected,-Mesocosm_treatment,-Treatment_notes,-Notes,-lib_size_clean,-is.neg,-Num_larvae_d00,-Num_larvae_d08,-Num_larvae_d34,-Num_larvae_d40,-Total_pupae,-Proportion_pupated,-Biomass_day30)
colnames(df.larv1)
df.larv.long <- melt(df.larv2, id.vars=c("sum", "Mesocosm_id", "food.microbes", "Biomass_day40"))
df.larv.long$rowid <- 1:nrow(df.larv.long)
df.larv2 <- df.larv1[df.larv1$sum!=0,]
df.larv.long <- melt(df.larv1, id.vars=c("sum", "Mesocosm_id", "food.microbes", "Biomass_day40"))
##'full' model
larv.mod <- glmmTMB(value~offset(log(sum))+food.microbes+(1|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~food.microbes,data=df.larv.long)
summary(larv.mod)
##'full' model
water.mod <- glmmTMB(value~offset(log(sum))+food.microbes+(1|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~food.microbes,data=df.water.long)
summary(water.mod)
##no random interaction with treatments
water.mod.nofm <- glmmTMB(value~offset(log(sum))+food.microbes+(1|variable),family=nbinom2,dispformula=~food.microbes,data=df.water.long)
summary(water.mod.nofm)
anova(water.mod,water.mod.nofm) #sig 2.2e-16***
water.mod.ranef <- as.data.frame(ranef(water.mod))
water.mod.biom <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1+Biomass_day40|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~food.microbes,data=df.water.long)
water.mod.biom.norand <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable:food.microbes),family=nbinom2,dispformula=~food.microbes,data=df.water.long)
anova(water.mod.biom.norand,water.mod.biom) #0.001
##'full' model
larv.mod <- glmmTMB(value~offset(log(sum))+food.microbes+(1|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~food.microbes,data=df.larv.long)
summary(larv.mod)
##no random interaction with treatments
larv.mod.nofm <- glmmTMB(value~offset(log(sum))+food.microbes+(1|variable),family=nbinom2,dispformula=~food.microbes,data=df.larv.long)
summary(larv.mod.nofm)
anova(larv.mod,larv.mod.nofm) #sig 2.2e-16***
larv.mod.biom <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1+Biomass_day40|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~food.microbes,data=df.larv.long)
larv.mod.biom <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1+Biomass_day40|variable)+(1|variable:food.microbes),family=nbinom1,dispformula=~food.microbes,data=df.larv.long)
larv.mod.biom <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(0+Biomass_day40|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~food.microbes,data=df.larv.long)
anova(larv.mod,larv.mod.biom) #sig 0.004816**
##'full' model
larv.mod <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~food.microbes,data=df.larv.long)
larv.mod.biom <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(0+Biomass_day40|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~food.microbes,data=df.larv.long)
larv.mod.biom.nos <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~food.microbes,data=df.larv.long)
anova(larv.mod.biom,larv.mod.biom.nos) #sig 0.004816**
larv.mod.biom.nos <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~variable+food.microbes,data=df.larv.long)
larv.mod.biom <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(0+Biomass_day40|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~variable+food.microbes,data=df.larv.long)
anova(larv.mod.biom,larv.mod.biom.nos) #sig 0.02*
##'full' model
water.mod <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~variable+food.microbes,data=df.water.long)
##no random interaction with treatments
water.mod.nofm <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable),family=nbinom2,dispformula=~variable+food.microbes,data=df.water.long)
anova(water.mod,water.mod.nofm) #sig 2.2e-16***
# biom.d40.scaled <- scale(df.water.long$Biomass_day40)
# df.water.long$Biomass_day40 <- c(biom.d40.scaled)
water.mod.biom <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1+Biomass_day40|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~variable+food.microbes,data=df.water.long)
# biom.d40.scaled <- scale(df.water.long$Biomass_day40)
# df.water.long$Biomass_day40 <- c(biom.d40.scaled)
water.mod.biom <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(0+Biomass_day40|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~variable+food.microbes,data=df.water.long)
biom.d40.scaled <- scale(df.water.long$Biomass_day40)
df.water.long$Biomass_day40_scaled <- c(biom.d40.scaled)
water.mod.biom <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40_scaled+(1+Biomass_day40_scaled|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~variable+food.microbes,data=df.water.long)
##'full' model
larv.mod <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~variable+food.microbes,data=df.larv.long)
##no random interaction with treatments
larv.mod.nofm <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable),family=nbinom2,dispformula=~variable+food.microbes,data=df.larv.long)
summary(larv.mod.nofm)
anova(larv.mod,larv.mod.nofm) #sig 2.2e-16***
larv.mod.biom <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(0+Biomass_day40|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~variable+food.microbes,data=df.larv.long)
summary(larv.mod.biom)
anova(water.mod.biom,water.mod)
water.mod.biom <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1+Biomass_day40|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~variable+food.microbes,data=df.water.long)
water.mod.biom <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(0+Biomass_day40|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~variable+food.microbes,data=df.water.long)
anova(water.mod.biom,water.mod)
##without random interaction with treatments
water.mod.biom.nofm <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(0+Biomass_day40|variable),family=nbinom2,dispformula=~variable+food.microbes,data=df.water.long)
anova(water.mod.biom,water.mod.biom.nofm)
##'full' model
larv.mod <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~variable+food.microbes,data=df.larv.long)
##no random interaction with treatments
larv.mod.nofm <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable),family=nbinom2,dispformula=~variable+food.microbes,data=df.larv.long)
anova(larv.mod,larv.mod.nofm) #sig 2.2e-16***
larv.mod.biom <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(0+Biomass_day40|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~variable+food.microbes,data=df.larv.long)
anova(larv.mod,larv.mod.biom) #sig 0.02*
larv.mod.biom.nofm <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(0+Biomass_day40|variable),family=nbinom2,dispformula=~variable+food.microbes,data=df.larv.long)
anova(larv.mod.biom,larv.mod.biom.nofm) #sig 0.02*
summary(water.mod)
summary(larv.mod.biom)
##without dispersion formula
larv.mod.biom.nodisp <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(0+Biomass_day40|variable)+(1|variable:food.microbes),family=nbinom2,data=df.larv.long)
anova(larv.mod.biom,larv.mod.biom.nodisp)
##without dispersion formula
larv.mod.biom.nodisp <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(0+Biomass_day40|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~variable,data=df.larv.long)
anova(larv.mod.biom,larv.mod.biom.nodisp)
##without dispersion formula
water.mod <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~variable,data=df.water.long)
##'full' model
water.mod <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~variable+food.microbes,data=df.water.long)
##without dispersion formula
water.mod.nodisp <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~variable,data=df.water.long)
anova(water.mod,water.mod.nodisp)
##random slope
water.mod.biom <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(0+Biomass_day40|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~variable+food.microbes,data=df.water.long)
##random slope
##1+Biomass_day40 didn't work
water.mod.biom <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(0+Biomass_day40|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~variable+food.microbes,data=df.water.long)
anova(water.mod,water.mod.biom)
###save conditional modes - random slope stuff below wasn't significant
water.mod.ranef <- as.data.frame(ranef(water.mod))
write.csv(water.mod.ranef, "water.mod.ranef.manual.csv")
write.csv(water.mod.ranef, "water.mod.ranef.csv")
##basic model
larv.mod <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~variable+food.microbes,data=df.larv.long)
summary(larv.mod)
##no random interaction with treatments
larv.mod.nofm <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable),family=nbinom2,dispformula=~variable+food.microbes,data=df.larv.long)
summary(larv.mod.nofm)
anova(larv.mod,larv.mod.nofm) #sig 2.2e-16***
##random slope
##1+Biomass_day40 didn't work
larv.mod.biom <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(0+Biomass_day40|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~variable+food.microbes,data=df.larv.long)
anova(larv.mod,larv.mod.biom) #sig
##without dispersion of food.microbes
water.mod.nodisp <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~variable,data=df.water.long)
anova(water.mod,water.mod.nodisp) #sig 2.2e-16***
##random slope, no random interaction with treatments
larv.mod.biom.nofm <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(0+Biomass_day40|variable),family=nbinom2,dispformula=~variable+food.microbes,data=df.water.long)
##random slope, no random interaction with treatments
larv.mod.biom.nofm <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(0+Biomass_day40|variable),family=nbinom2,dispformula=~variable+food.microbes,data=df.larv.long)
anova(larv.mod.biom,larv.mod.biom.nofm) #sig 2.2e-16***
##without dispersion of food.microbes
larv.mod.biom.nodisp <- glmmTMB(value~offset(log(sum))+food.microbes+Biomass_day40+(1|variable)+(1|variable:food.microbes),family=nbinom2,dispformula=~variable,data=df.larv.long)
summary(larv.mod.biom.nodisp)
anova(larv.mod.biom,larv.mod.biom.nodisp) #sig 2.2e-16***
###save conditional modes
larv.mod.ranef <- as.data.frame(ranef(larv.mod))
write.csv(larv.mod.ranef, "larv.mod.ranef.csv")
ids <- readRDS("flpub.taxa.ids.rds")
setwd("~/nicfall@bu.edu - Google Drive/My Drive/Flirma/flirma_networks/fl_16s/01.generate_asv_table")
ids <- readRDS("flpub.taxa.ids.rds")
ranks <- c("domain", "phylum", "class", "order", "family", "genus", "species") # ranks of interest
# Convert the output object of class "Taxa" to a matrix analogous to the output from assignTaxonomy
taxid <- t(sapply(ids, function(x) {
m <- match(ranks, x$rank)
taxa <- x$taxon[m]
taxa[startsWith(taxa, "unclassified_")] <- NA
taxa
}))
colnames(taxid) <- ranks
View(taxid)
##making a column for asv_id
taxid2 <- cbind(taxid,rownames(taxid))
colnames(taxid2)[8] <- "ASV_id"
##save save
saveRDS(taxid2,file="flpub.taxa.ids2.rds")
View(taxid2)
samdf <- read.csv("fl_sample_info - 16s_all_newvars.csv")
row.names(samdf) <- samdf$sample_num
#taxid2 <- readRDS("flpub.taxa.ids2.rds")
seqtab.trim <- readRDS("flpub.seqtab.nochim.lulu.trim.rds")
#phyloseq object with new taxa ids
##otu table that's trimmed af
ps <- phyloseq(otu_table(seqtab.trim, taxa_are_rows=FALSE),
sample_data(samdf),
tax_table(taxid2))
ps
View(samdf)
View(seqtab.trim)
rownames(seqtab.trim)
samdf <- read.csv("fl_sample_info - 16s_all_newvars.csv")
row.names(samdf) <- samdf$sample_num
#phyloseq object with new taxa ids
##otu table that's trimmed af
ps <- phyloseq(otu_table(seqtab.trim, taxa_are_rows=FALSE),
sample_data(samdf),
tax_table(taxid2))
ps
saveRDS(ps,file="flpub.ps.lulu.trim.rds")
library('phyloseq')
library('ggplot2')
library("vegan")
#install.packages("Rmisc")
library('Rmisc')
library(cowplot)
#BiocManager::install("ShortRead")
library(ShortRead)
#### Read in previously saved datafiles ####
setwd("~/nicfall@bu.edu - Google Drive/My Drive/Flirma/flirma_networks/fl_16s/01.generate_asv_table")
ps #8937 taxa, 362 samples
#### remove mitochondria, chloroplasts, non-bacteria ####
ps.mito <- subset_taxa(ps, (family=="Mitochondria"))
ps.mito #5 taxa to remove
ps.chlor <- subset_taxa(ps, (order=="Chloroplast"))
ps.chlor #121 taxa to remove
ps.notbact <- subset_taxa(ps, (domain!="Bacteria") | is.na(domain))
ps.notbact #1454 taxa to remove
ps.nomito <- subset_taxa(ps, (family!="Mitochondria") | is.na(family))
ps.nomito #8932 taxa
ps.nochlor <- subset_taxa(ps.nomito, (order!="Chloroplast") | is.na(order))
ps.nochlor #8811 taxa
ps.clean <- subset_taxa(ps.nochlor, (domain=="Bacteria"))
ps.clean #7357 taxa
#just archaea
ps.arch <- subset_taxa(ps.nomito, (domain=="Archaea"))
ps.arch #104 taxa
#BiocManager::install("decontam")
library(decontam)
df <- as.data.frame(sample_data(ps.clean)) # Put sample_data into a ggplot-friendly data.frame
df$LibrarySize <- sample_sums(ps.clean)
df <- df[order(df$LibrarySize),]
df$Index <- seq(nrow(df))
ggplot(data=df, aes(x=Index, y=LibrarySize, color=year)) + geom_point()
sample_data(ps.clean)$lib_size_clean <- sample_sums(ps.clean)
sample_data(ps.clean)$is.neg <- sample_data(ps.clean)$full_site == "neg"
contamdf.prev <- isContaminant(ps.clean, neg="is.neg",threshold=0.5)
table(contamdf.prev$contaminant)
# Make phyloseq object of presence-absence in negative controls and true samples
ps.pa <- transform_sample_counts(ps.clean, function(abund) 1*(abund>0))
ps.pa.neg <- prune_samples(sample_data(ps.pa)$full_site == "neg", ps.pa)
ps.pa.pos <- prune_samples(sample_data(ps.pa)$full_site != "neg", ps.pa)
# Make data.frame of prevalence in positive and negative samples
df.pa <- data.frame(pa.pos=taxa_sums(ps.pa.pos), pa.neg=taxa_sums(ps.pa.neg),
contaminant=contamdf.prev$contaminant)
ggplot(data=df.pa, aes(x=pa.neg, y=pa.pos, color=contaminant)) + geom_point() +
xlab("Prevalence (Negative Controls)") + ylab("Prevalence (True Samples)")
seqtab.trim["neg1",]
#remove from ps.clean:
ps.clean1 <- prune_taxa(!contamdf.prev$contaminant,ps.clean)
#also remove negative controls, don't need them anymore I think
ps.clean.noneg <- subset_samples(ps.clean1,(full_site!="neg"))
ps.clean.noneg
saveRDS(ps.clean.noneg,file="fl16s.23.ps.clean.noneg.rds")
#ps.less <- readRDS("fl16s.23.ps.cleaner.less.rds")
sum(sample_sums(ps.clean.noneg))
mean(sample_sums(ps.clean.noneg))
#31531.53
sd(sample_sums(ps.clean.noneg))
write.csv(seqtab.trim,"seqtab.trim.csv")
saveRDS(ps.clean.noneg,file="flpub.ps.lulu.trim.clean.rds")
tail(taxa_sums(ps.clean.noneg))
library(stringr)
ps.clean.copy <- ps.clean.noneg
tax <- as.data.frame(ps.clean.copy@tax_table@.Data)
View(tax)
tax.clean <- data.frame(row.names = row.names(tax),
Kingdom = str_replace(tax[,1], "D_0__",""),
Phylum = str_replace(tax[,2], "D_1__",""),
Class = str_replace(tax[,3], "D_2__",""),
Order = str_replace(tax[,4], "D_3__",""),
Family = str_replace(tax[,5], "D_4__",""),
Genus = str_replace(tax[,6], "D_5__",""),
#Species = str_replace(tax[,7], "D_6__",""),
Sequence = c(tax[,8]),
ASV_id = c(tax[,9]),
stringsAsFactors = FALSE)
tax.clean <- data.frame(row.names = row.names(tax),
Kingdom = str_replace(tax[,1], "D_0__",""),
Phylum = str_replace(tax[,2], "D_1__",""),
Class = str_replace(tax[,3], "D_2__",""),
Order = str_replace(tax[,4], "D_3__",""),
Family = str_replace(tax[,5], "D_4__",""),
Genus = str_replace(tax[,6], "D_5__",""),
#Species = str_replace(tax[,7], "D_6__",""),
#Sequence = c(tax[,8]),
ASV_id = c(tax[,8]),
stringsAsFactors = FALSE)
tax.clean[is.na(tax.clean)] <- ""
for (i in 1:7){ tax.clean[,i] <- as.character(tax.clean[,i])}
####### Fill holes in the tax table
tax.clean[is.na(tax.clean)] <- ""
for (i in 1:nrow(tax.clean)){
if (tax.clean[i,2] == ""){
kingdom <- paste("Kingdom_", tax.clean[i,1], sep = "")
tax.clean[i, 2:6] <- kingdom
} else if (tax.clean[i,3] == ""){
phylum <- paste("Phylum_", tax.clean[i,2], sep = "")
tax.clean[i, 3:6] <- phylum
} else if (tax.clean[i,4] == ""){
class <- paste("Class_", tax.clean[i,3], sep = "")
tax.clean[i, 4:6] <- class
} else if (tax.clean[i,5] == ""){
order <- paste("Order_", tax.clean[i,4], sep = "")
tax.clean[i, 5:6] <- order
} else if (tax.clean[i,6] == ""){
family <- paste("Family_", tax.clean[i,5], sep = "")
tax.clean[i, 6:6] <- family
}
}
View(tax.clean)
tax_table(ps.clean.copy) <- as.matrix(tax.clean)
#saveRDS(ps.clean.copy,file="reusum23.ps.lulu.clean.decontam.taxafull.rds")
saveRDS(ps.clean.noneg,file="flpub.ps.lulu.trim.clean.rds")
setwd("/Volumes/GoogleDrive/My Drive/Flirma/flirma_networks/fl_16s/03.comm_comp")
setwd("~/Library/CloudStorage/GoogleDrive-nicfall@bu.edu/My Drive/Flirma/flirma_networks/fl_16s/03.comm_comp")
setwd("~/nicfall@bu.edu - Google Drive/My Drive/Flirma/flirma_networks/fl_16s/03.comm_comp")
setwd("~/nicfall@bu.edu - Google Drive/My Drive/Flirma/flirma_networks/fl_16s/03.comm_comp")
sample_data(ps.clean.copy)$lib_size_clean <- sample_sums(ps.clean.copy)
samdf.clean <- data.frame(ps.clean.copy@sam_data)
samdf.low <- subset(samdf.clean,lib_size_clean<10000)
ggplot(data=samdf.low, aes(x=Longer_name, y=lib_size_clean, color=Mesocosm_type))+
geom_point()+
theme(axis.text.x=element_text(angle=45,hjust=1))
ggplot(data=samdf.low, aes(x=Longer_name, y=lib_size_clean, color=year))+
geom_point()+
theme(axis.text.x=element_text(angle=45,hjust=1))
View(samdf.clean)
ggplot(data=samdf.low, aes(x=sample, y=lib_size_clean, color=year))+
geom_point()+
theme(axis.text.x=element_text(angle=45,hjust=1))
df <- data.frame(ps.clean.copy@otu_table) # Put sample_data into a ggplot-friendly data.frame
df2 <- df[order(df$lib_size_clean),]
#remove from ps.clean:
ps.clean1 <- prune_taxa(!contamdf.prev$contaminant,ps.clean)
#also remove negative controls, don't need them anymore I think
ps.clean2 <- subset_samples(ps.clean1,(full_site!="neg"))
ps.clean2
ps.clean.noneg <- prune_taxa(taxa_sums(ps.clean2)>0,ps.clean2)
ps.clean.noneg
library(stringr)
ps.clean.copy <- ps.clean.noneg
tax <- as.data.frame(ps.clean.copy@tax_table@.Data)
tax.clean <- data.frame(row.names = row.names(tax),
Kingdom = str_replace(tax[,1], "D_0__",""),
Phylum = str_replace(tax[,2], "D_1__",""),
Class = str_replace(tax[,3], "D_2__",""),
Order = str_replace(tax[,4], "D_3__",""),
Family = str_replace(tax[,5], "D_4__",""),
Genus = str_replace(tax[,6], "D_5__",""),
#Species = str_replace(tax[,7], "D_6__",""),
#Sequence = c(tax[,8]),
ASV_id = c(tax[,8]),
stringsAsFactors = FALSE)
tax.clean[is.na(tax.clean)] <- ""
for (i in 1:7){ tax.clean[,i] <- as.character(tax.clean[,i])}
####### Fill holes in the tax table
tax.clean[is.na(tax.clean)] <- ""
for (i in 1:nrow(tax.clean)){
if (tax.clean[i,2] == ""){
kingdom <- paste("Kingdom_", tax.clean[i,1], sep = "")
tax.clean[i, 2:6] <- kingdom
} else if (tax.clean[i,3] == ""){
phylum <- paste("Phylum_", tax.clean[i,2], sep = "")
tax.clean[i, 3:6] <- phylum
} else if (tax.clean[i,4] == ""){
class <- paste("Class_", tax.clean[i,3], sep = "")
tax.clean[i, 4:6] <- class
} else if (tax.clean[i,5] == ""){
order <- paste("Order_", tax.clean[i,4], sep = "")
tax.clean[i, 5:6] <- order
} else if (tax.clean[i,6] == ""){
family <- paste("Family_", tax.clean[i,5], sep = "")
tax.clean[i, 6:6] <- family
}
}
tax_table(ps.clean.copy) <- as.matrix(tax.clean)
sample_data(ps.clean.copy)$lib_size_clean <- sample_sums(ps.clean.copy)
samdf.clean <- data.frame(ps.clean.copy@sam_data)
samdf.low <- subset(samdf.clean,lib_size_clean<10000)
ggplot(data=samdf.low, aes(x=sample, y=lib_size_clean, color=year))+
geom_point()+
theme(axis.text.x=element_text(angle=45,hjust=1))
samdf.clean <- samdf.clean[order(samdf.clean$lib_size_clean),]
samdf.clean$Index <- seq(nrow(samdf.clean))
ggplot(data=samdf.clean, aes(x=Index, y=lib_size_clean))+
geom_point()
head(samdf.clean$lib_size_clean) #jumps from 4k to 9.2k
head(samdf.clean$lib_size_clean,n=20) #jumps from 4k to 9.2k
head(samdf.clean$lib_size_clean,n=50) #jumps from 4k to 9.2k
tail(samdf.clean$lib_size_clean,n=50)
##closer looks
ggplot(data=samdf.clean, aes(x=Index, y=lib_size_clean))+
geom_point()+
xlim(0,100)+
ylim(5000,25000)
##closer looks
ggplot(data=samdf.clean, aes(x=Index, y=lib_size_clean))+
geom_point()+
xlim(0,100)+
ylim(0,10000)
##closer looks
ggplot(data=samdf.clean, aes(x=Index, y=lib_size_clean))+
geom_point()+
xlim(0,50)+
ylim(0,10000)
##closer looks
ggplot(data=samdf.clean, aes(x=Index, y=lib_size_clean,label=sample))+
geom_point()+
xlim(0,50)+
ylim(0,10000)
##closer looks
ggplot(data=samdf.clean, aes(x=Index, y=lib_size_clean,color=year))+
geom_point()+
xlim(0,50)+
ylim(0,10000)
head(samdf.clean$lib_size_clean,n=50)
##removing low read samples (<2500):
subset(samdf.clean, lib_size_clean <2500)
##If I were to remove:
ps.clean.less <- subset_samples(ps.clean.copy,sample!="UK2-I_1086"&sample!="UK2-O_1119")
ps.clean.less
ps.clean.less <- prune_taxa(taxa_sums(ps.clean.less1)>0,ps.clean.less1)
##If I were to remove:
ps.clean.less1 <- subset_samples(ps.clean.copy,sample!="UK2-I_1086"&sample!="UK2-O_1119")
ps.clean.less <- prune_taxa(taxa_sums(ps.clean.less1)>0,ps.clean.less1)
saveRDS(ps.clean.less,file="flpub.ps.lulu.trim.clean.rds")
ps.clean.less
ps.clean.less1
ps.clean <- readRDS("../01.generate_asv_table/flpub.ps.lulu.trim.clean.rds")
ps.clean
ps.clean <- readRDS("../01.generate_asv_table/flpub.ps.lulu.trim.clean.rds")
ps.clean
saveRDS(ps.clean.less,file="flpub.ps.lulu.trim.clean.rds")
ps.clean <- readRDS("../01.generate_asv_table/flpub.ps.lulu.trim.clean.rds")
ps.clean
# otu_table()   OTU Table:         [ 7289 taxa and 359 samples ]
# sample_data() Sample Data:       [ 359 samples by 13 sample variables ]
# tax_table()   Taxonomy Table:    [ 7289 taxa by 7 taxonomic ranks ]
getwd()
#### Read in previously saved datafiles ####
setwd("~/nicfall@bu.edu - Google Drive/My Drive/Flirma/flirma_networks/fl_16s/01.generate_asv_table")
saveRDS(ps.clean.less,file="flpub.ps.lulu.trim.clean.rds")
setwd("~/nicfall@bu.edu - Google Drive/My Drive/Flirma/flirma_networks/fl_16s/03.comm_comp")
ps.clean <- readRDS("../01.generate_asv_table/flpub.ps.lulu.trim.clean.rds")
ps.clean
##other option
ps.temp <- subset_samples(ps.clean,site!="UK3")
ps.clean.sid <- subset_samples(ps.temp,spp=="ssid")
ps.clean.rad <- subset_samples(ps.temp,spp=="srad")
ps.clr <-  microbiome::transform(ps.clean,"clr")
ps.clr <-  microbiome::transform(ps.clean.sid,"clr")
ps.sid.clr <-  microbiome::transform(ps.clean.sid,"clr")
ord.sid.clr <- ordinate(ps.sid.clr,"PCoA","euclidean")
plot_ordination(ps.sid.clr, ord.sid.clr,color="time",shape="zone",axes=c(1,2))+
stat_ellipse()+
scale_color_manual(values=c("#FA7F53","#A8327D","#3B0F70"))+
theme_cowplot()+
scale_alpha_manual(breaks=c("Inshore","Offshore"),values=c(0.45,0.75),name="Reef zone")
ord.sid.clr <- ordinate(ps.sid.clr,"NMDS","euclidean")
ord.sid.horn <- ordinate(ps.clean.sid,"PCoA","horn")
plot_ordination(ps.clean.sid, ord.sid.horn,color="time",shape="zone",axes=c(1,2))+
stat_ellipse()+
scale_color_manual(values=c("#FA7F53","#A8327D","#3B0F70"))+
theme_cowplot()+
scale_alpha_manual(breaks=c("Inshore","Offshore"),values=c(0.45,0.75),name="Reef zone")
ord.sid.clr <- ordinate(ps.sid.clr,"NMDS","euclidean")
View(ord.sid.clr)
plot_ordination(ps.sid.clr, ord.sid.clr,color="time",shape="zone",axes=c(1,2))+
stat_ellipse()+
scale_color_manual(values=c("#FA7F53","#A8327D","#3B0F70"))+
theme_cowplot()+
scale_alpha_manual(breaks=c("Inshore","Offshore"),values=c(0.45,0.75),name="Reef zone")
ord.sid.clr <- ordinate(ps.sid.clr,"PCoA","euclidean")
plot_ordination(ps.sid.clr, ord.sid.clr,color="time",shape="zone",axes=c(1,2))+
stat_ellipse()+
scale_color_manual(values=c("#FA7F53","#A8327D","#3B0F70"))+
theme_cowplot()+
scale_alpha_manual(breaks=c("Inshore","Offshore"),values=c(0.45,0.75),name="Reef zone")
plot_ordination(ps.sid.clr, ord.sid.clr,color="time",shape="zone",axes=c(1,2))+
stat_ellipse()+
scale_color_manual(values=c("#FA7F53","#A8327D","#3B0F70"))+
theme_cowplot()+
scale_alpha_manual(breaks=c("Inshore","Offshore"),values=c(0.45,0.75),name="Reef zone")+
facet_wrap(~site)
plot_ordination(ps.clean.sid, ord.sid.horn,color="time",shape="zone",axes=c(1,2))+
stat_ellipse()+
scale_color_manual(values=c("#FA7F53","#A8327D","#3B0F70"))+
theme_cowplot()+
scale_alpha_manual(breaks=c("Inshore","Offshore"),values=c(0.45,0.75),name="Reef zone")
ord.sid.horn <- ordinate(ps.clean.sid,"PCoA","bray")
plot_ordination(ps.clean.sid, ord.sid.horn,color="time",shape="zone",axes=c(1,2))+
stat_ellipse()+
scale_color_manual(values=c("#FA7F53","#A8327D","#3B0F70"))+
theme_cowplot()+
scale_alpha_manual(breaks=c("Inshore","Offshore"),values=c(0.45,0.75),name="Reef zone")
